// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "drizzle_migrations",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "hash",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.drizzle_migrations_id_seq'::regclass)",
        comment: "",
      },
    ],
  },
  {
    name: "exam_years",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["year_id"],
    uniqueConstraints: {
      exam_years_exam_year_key: {
        name: "exam_years_exam_year_key",
        columns: ["exam_year"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "exam_year",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "year_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.exam_years_year_id_seq'::regclass)",
        comment: "",
      },
    ],
  },
  {
    name: "payment_history",
    checkConstraints: {},
    foreignKeys: {
      payment_history_subscription_id_user_subscriptions_subscription: {
        name: "payment_history_subscription_id_user_subscriptions_subscription",
        columns: ["subscription_id"],
        referencedTable: "user_subscriptions",
        referencedColumns: ["subscription_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["payment_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "amount_inr",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "gst_details",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "next_billing_date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "payment_date",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "payment_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.payment_history_payment_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "payment_method",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "payment_status",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "receipt_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "stripe_invoice_id",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "stripe_payment_id",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subscription_id",
        type: "link",
        link: { table: "user_subscriptions" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "practice_sessions",
    checkConstraints: {},
    foreignKeys: {
      practice_sessions_subject_id_subjects_subject_id_fk: {
        name: "practice_sessions_subject_id_subjects_subject_id_fk",
        columns: ["subject_id"],
        referencedTable: "subjects",
        referencedColumns: ["subject_id"],
        onDelete: "NO ACTION",
      },
      practice_sessions_subtopic_id_subtopics_subtopic_id_fk: {
        name: "practice_sessions_subtopic_id_subtopics_subtopic_id_fk",
        columns: ["subtopic_id"],
        referencedTable: "subtopics",
        referencedColumns: ["subtopic_id"],
        onDelete: "NO ACTION",
      },
      practice_sessions_topic_id_topics_topic_id_fk: {
        name: "practice_sessions_topic_id_topics_topic_id_fk",
        columns: ["topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["session_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "duration_minutes",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "end_time",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_completed",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "max_score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "notes",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "questions_attempted",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "questions_correct",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.practice_sessions_session_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "session_type",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.session_type",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "settings",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "start_time",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "subject_id",
        type: "link",
        link: { table: "subjects" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subtopic_id",
        type: "link",
        link: { table: "subtopics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "total_questions",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "question_attempts",
    checkConstraints: {},
    foreignKeys: {
      question_attempts_question_id_questions_question_id_fk: {
        name: "question_attempts_question_id_questions_question_id_fk",
        columns: ["question_id"],
        referencedTable: "questions",
        referencedColumns: ["question_id"],
        onDelete: "NO ACTION",
      },
      question_attempts_session_id_practice_sessions_session_id_fk: {
        name: "question_attempts_session_id_practice_sessions_session_id_fk",
        columns: ["session_id"],
        referencedTable: "practice_sessions",
        referencedColumns: ["session_id"],
        onDelete: "NO ACTION",
      },
      question_attempts_session_question_id_session_questions_session: {
        name: "question_attempts_session_question_id_session_questions_session",
        columns: ["session_question_id"],
        referencedTable: "session_questions",
        referencedColumns: ["session_question_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["attempt_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "attempt_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.question_attempts_attempt_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "attempt_number",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "1",
        comment: "",
      },
      {
        name: "attempt_timestamp",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "is_correct",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "marks_awarded",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_id",
        type: "link",
        link: { table: "questions" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "review_flag",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "session_id",
        type: "link",
        link: { table: "practice_sessions" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_question_id",
        type: "link",
        link: { table: "session_questions" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "time_taken_seconds",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_answer",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_notes",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "question_papers",
    checkConstraints: {},
    foreignKeys: {
      fk_question_papers_exam_year: {
        name: "fk_question_papers_exam_year",
        columns: ["exam_year_id"],
        referencedTable: "exam_years",
        referencedColumns: ["year_id"],
        onDelete: "NO ACTION",
      },
      fk_question_papers_subject: {
        name: "fk_question_papers_subject",
        columns: ["subject_id"],
        referencedTable: "subjects",
        referencedColumns: ["subject_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["paper_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "exam_year_id",
        type: "link",
        link: { table: "exam_years" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "max_marks",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "paper_code",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "paper_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.question_papers_paper_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "source_description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject_id",
        type: "link",
        link: { table: "subjects" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "time_duration_minutes",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "total_questions",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "upload_date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "question_tags",
    checkConstraints: {},
    foreignKeys: {
      fk_question_tags_question: {
        name: "fk_question_tags_question",
        columns: ["question_id"],
        referencedTable: "questions",
        referencedColumns: ["question_id"],
        onDelete: "CASCADE",
      },
      fk_question_tags_tag: {
        name: "fk_question_tags_tag",
        columns: ["tag_id"],
        referencedTable: "tags",
        referencedColumns: ["tag_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["question_id", "tag_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "question_id",
        type: "link",
        link: { table: "questions" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "tag_id",
        type: "link",
        link: { table: "tags" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "questions",
    checkConstraints: {},
    foreignKeys: {
      fk_questions_paper: {
        name: "fk_questions_paper",
        columns: ["paper_id"],
        referencedTable: "question_papers",
        referencedColumns: ["paper_id"],
        onDelete: "NO ACTION",
      },
      fk_questions_subject: {
        name: "fk_questions_subject",
        columns: ["subject_id"],
        referencedTable: "subjects",
        referencedColumns: ["subject_id"],
        onDelete: "NO ACTION",
      },
      fk_questions_subtopic: {
        name: "fk_questions_subtopic",
        columns: ["subtopic_id"],
        referencedTable: "subtopics",
        referencedColumns: ["subtopic_id"],
        onDelete: "NO ACTION",
      },
      fk_questions_topic: {
        name: "fk_questions_topic",
        columns: ["topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["question_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "details",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: "'{}'::jsonb",
        comment: "JSONB column for storing question type-specific details",
      },
      {
        name: "difficulty_level",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.difficulty_level",
        notNull: false,
        unique: false,
        defaultValue:
          "'medium'::bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.difficulty_level",
        comment: "",
      },
      {
        name: "explanation",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "image_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "is_image_based",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "marks",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "4",
        comment: "",
      },
      {
        name: "negative_marks",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "1",
        comment: "",
      },
      {
        name: "paper_id",
        type: "link",
        link: { table: "question_papers" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.questions_question_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "question_number",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_text",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_type",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.question_type",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "source_type",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.question_source_type",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject_id",
        type: "link",
        link: { table: "subjects" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subtopic_id",
        type: "link",
        link: { table: "subtopics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "session_questions",
    checkConstraints: {},
    foreignKeys: {
      session_questions_question_id_questions_question_id_fk: {
        name: "session_questions_question_id_questions_question_id_fk",
        columns: ["question_id"],
        referencedTable: "questions",
        referencedColumns: ["question_id"],
        onDelete: "NO ACTION",
      },
      session_questions_session_id_practice_sessions_session_id_fk: {
        name: "session_questions_session_id_practice_sessions_session_id_fk",
        columns: ["session_id"],
        referencedTable: "practice_sessions",
        referencedColumns: ["session_id"],
        onDelete: "CASCADE",
      },
      session_questions_topic_id_topics_topic_id_fk: {
        name: "session_questions_topic_id_topics_topic_id_fk",
        columns: ["topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["session_question_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "is_bookmarked",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "question_id",
        type: "link",
        link: { table: "questions" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_order",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_id",
        type: "link",
        link: { table: "practice_sessions" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_question_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.session_questions_session_question_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "time_spent_seconds",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "subjects",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["subject_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "subject_code",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subjects_subject_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "subject_name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "subscription_plans",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["plan_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "duration_days",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "features",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "plan_code",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subscription_plan",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "plan_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subscription_plans_plan_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "plan_name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price_id_stripe",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price_inr",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "product_id_stripe",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "test_limit_daily",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "subtopics",
    checkConstraints: {},
    foreignKeys: {
      fk_subtopics_topic: {
        name: "fk_subtopics_topic",
        columns: ["topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["subtopic_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "subtopic_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subtopics_subtopic_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "subtopic_name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "tags",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["tag_id"],
    uniqueConstraints: {
      tags_tag_name_key: { name: "tags_tag_name_key", columns: ["tag_name"] },
    },
    columns: [
      {
        name: "tag_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.tags_tag_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "tag_name",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "topic_mastery",
    checkConstraints: {},
    foreignKeys: {
      topic_mastery_question_id_questions_question_id_fk: {
        name: "topic_mastery_question_id_questions_question_id_fk",
        columns: ["question_id"],
        referencedTable: "questions",
        referencedColumns: ["question_id"],
        onDelete: "NO ACTION",
      },
      topic_mastery_session_id_practice_sessions_session_id_fk: {
        name: "topic_mastery_session_id_practice_sessions_session_id_fk",
        columns: ["session_id"],
        referencedTable: "practice_sessions",
        referencedColumns: ["session_id"],
        onDelete: "NO ACTION",
      },
      topic_mastery_topic_id_topics_topic_id_fk: {
        name: "topic_mastery_topic_id_topics_topic_id_fk",
        columns: ["topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["mastery_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "accuracy_percentage",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "last_practiced",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "mastery_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.topic_mastery_mastery_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "mastery_level",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.mastery_level",
        notNull: true,
        unique: false,
        defaultValue:
          "'notStarted'::bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.mastery_level",
        comment: "",
      },
      {
        name: "progress_data",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question_id",
        type: "link",
        link: { table: "questions" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "questions_attempted",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "questions_correct",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "session_id",
        type: "link",
        link: { table: "practice_sessions" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "streak_count",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "topics",
    checkConstraints: {},
    foreignKeys: {
      fk_topics_parent: {
        name: "fk_topics_parent",
        columns: ["parent_topic_id"],
        referencedTable: "topics",
        referencedColumns: ["topic_id"],
        onDelete: "NO ACTION",
      },
      fk_topics_subject: {
        name: "fk_topics_subject",
        columns: ["subject_id"],
        referencedTable: "subjects",
        referencedColumns: ["subject_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["topic_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "parent_topic_id",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject_id",
        type: "link",
        link: { table: "subjects" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.topics_topic_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "topic_name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "user_subscriptions",
    checkConstraints: {},
    foreignKeys: {
      user_subscriptions_plan_id_subscription_plans_plan_id_fk: {
        name: "user_subscriptions_plan_id_subscription_plans_plan_id_fk",
        columns: ["plan_id"],
        referencedTable: "subscription_plans",
        referencedColumns: ["plan_id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["subscription_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "cancel_at_period_end",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "canceled_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "current_period_end",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "current_period_start",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "last_test_date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "metadata",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "plan_id",
        type: "link",
        link: { table: "subscription_plans" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subscription_status",
        notNull: true,
        unique: false,
        defaultValue:
          "'active'::bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.subscription_status",
        comment: "",
      },
      {
        name: "stripe_customer_id",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "stripe_subscription_id",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subscription_id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_vhnkbsp4it4ada73h5p0ahrgm4_79j6ki.user_subscriptions_subscription_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "tests_used_today",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "tests_used_total",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "trial_end",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type DrizzleMigrations = InferredTypes["drizzle_migrations"];
export type DrizzleMigrationsRecord = DrizzleMigrations & XataRecord;

export type ExamYears = InferredTypes["exam_years"];
export type ExamYearsRecord = ExamYears & XataRecord;

export type PaymentHistory = InferredTypes["payment_history"];
export type PaymentHistoryRecord = PaymentHistory & XataRecord;

export type PracticeSessions = InferredTypes["practice_sessions"];
export type PracticeSessionsRecord = PracticeSessions & XataRecord;

export type QuestionAttempts = InferredTypes["question_attempts"];
export type QuestionAttemptsRecord = QuestionAttempts & XataRecord;

export type QuestionPapers = InferredTypes["question_papers"];
export type QuestionPapersRecord = QuestionPapers & XataRecord;

export type QuestionTags = InferredTypes["question_tags"];
export type QuestionTagsRecord = QuestionTags & XataRecord;

export type Questions = InferredTypes["questions"];
export type QuestionsRecord = Questions & XataRecord;

export type SessionQuestions = InferredTypes["session_questions"];
export type SessionQuestionsRecord = SessionQuestions & XataRecord;

export type Subjects = InferredTypes["subjects"];
export type SubjectsRecord = Subjects & XataRecord;

export type SubscriptionPlans = InferredTypes["subscription_plans"];
export type SubscriptionPlansRecord = SubscriptionPlans & XataRecord;

export type Subtopics = InferredTypes["subtopics"];
export type SubtopicsRecord = Subtopics & XataRecord;

export type Tags = InferredTypes["tags"];
export type TagsRecord = Tags & XataRecord;

export type TopicMastery = InferredTypes["topic_mastery"];
export type TopicMasteryRecord = TopicMastery & XataRecord;

export type Topics = InferredTypes["topics"];
export type TopicsRecord = Topics & XataRecord;

export type UserSubscriptions = InferredTypes["user_subscriptions"];
export type UserSubscriptionsRecord = UserSubscriptions & XataRecord;

export type DatabaseSchema = {
  drizzle_migrations: DrizzleMigrationsRecord;
  exam_years: ExamYearsRecord;
  payment_history: PaymentHistoryRecord;
  practice_sessions: PracticeSessionsRecord;
  question_attempts: QuestionAttemptsRecord;
  question_papers: QuestionPapersRecord;
  question_tags: QuestionTagsRecord;
  questions: QuestionsRecord;
  session_questions: SessionQuestionsRecord;
  subjects: SubjectsRecord;
  subscription_plans: SubscriptionPlansRecord;
  subtopics: SubtopicsRecord;
  tags: TagsRecord;
  topic_mastery: TopicMasteryRecord;
  topics: TopicsRecord;
  user_subscriptions: UserSubscriptionsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Madhavan-s-workspace-79j6ki.us-east-1.xata.sh/db/smartneet:main"
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
